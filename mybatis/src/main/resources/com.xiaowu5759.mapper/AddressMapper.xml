<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org//dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.xiaowu5759.mapper.AddressMapper">

    <!--开启二级缓存-->
    <!--配置缓存-->
    <cache
            eviction="FIFO"
            flushInterval="60000"
            size="512"
            readOnly="true"/>

    <select id="queryById" resultType="Address">
        select * from addresses where id = #{id}
    </select>

    <!--mybatis 推出了where标签 可以完美解决
    可以自动消除掉多余的and  推荐一直写and
    -->

    <!--if 希望处理这个字符串不为null “”
        1.  如何与空字符串比较
        2.  如何连接多个条件
    -->
    <select id="queryByConutryCity" resultType="Address">
        <!--多种情况就使用动态sql-->
        <!--如果缺失一个条件，则会查询返回一个空值-->
        select * from addresses
        <where>
            <if test="city !=null and test=city != ''">
                and city = #{city}
            </if>

            <if test="country != null">
                and country = #{country}
            </if>
        </where>
    </select>

    <!--
        功能：
        根据传入的对象动态的修改其中的值
        如果某个字段传入的非空值，再去修改，否则不修改
    -->
    <update id="update" parameterType="Address">
        update addresses
        <!--set-->
        <!--利用set标签，set只能处理后面的，
        可以完美解决，的问题-->
        <set>
            <if test="city != null and city != ''">
                city = #{city},
            </if>
            <if test="country != null and country != ''">
                country = #{country},
            </if>
            <if test="street != null and street != ''">
                street = #{street},
            </if>
            <if test="state != null and state != ''">
                state = #{state},
            </if>
            <if test="zip != null and zip != ''">
                zip = #{zip},
            </if>
        </set>

        <where>
            <!--addrId = #{addrId}-->
            <!--Unknown column 'addrId' in 'where clause'-->
            addr_Id = #{addrId}
        </where>
    </update>

    <!--parameterType是入参的类型，对于Mybatis而言，绝大部分都能进行自我推断-->
    <!--choose只会选择一个-->
    <select id="queryByConutryCity2" resultType="Address">
        select * from addresses
        <where>
            <choose>
                <when test="country != null">
                    and country = #{country}
                </when>
                <when test="state != null">
                    and state = #{state}
                </when>
                <otherwise>
                    and city = #{city}
                </otherwise>
            </choose>
        </where>
    </select>

    <select id="queryTrim" resultType="Address">
        select * from addresses
        <!--trim 是比较综合的一类-->
        <trim prefix="where" suffixOverrides="and">
            <if test="city != null and city != ''">
                city = #{city} and
            </if>
            <if test="country != null and country != ''">
                country = #{country} and
            </if>
            <if test="street != null and street != ''">
                street = #{street} and
            </if>
            <if test="state != null and state != ''">
                state = #{state} and
            </if>
            <if test="zip != null and zip != ''">
                zip = #{zip} and
            </if>
        </trim>
    </select>

    <!--什么子查询-->
    <!--select * from addresses where addr_id in-->
    <!--(select addr_id from addresses);-->
    <select id="queryByIds" resultType="Address">
        select * from addresses
        <where>
            addr_id in
            <!--separator 分隔符，彼此按什么分割-->
            <!--
                foreach
                collection 描述集合 list set map
                open 是后面的sql语句的拼接 开头
                item 是一个数据项代号，像一个指针一样
                separator 之间的分隔符
                index 如果需要使用标号，也可以使用
            -->
            <foreach collection="list" open="(" close=")" item="item" separator=",">
                #{item} + #{index}
            </foreach>
        </where>
    </select>

    <!--#{}不支持拼接%-->
    <!--类似一种通配符,利用函数方法-->
    <select id="queryLike" resultType="Address">
        <bind name="city" value="'%'+city+'%'"/>
        select * from addresses
        where
        <!--city like concat('%',#{city},'%')-->
        city like #{city}
    </select>

    <!--将最常用的列，抽取成为一个SQL片段，目的是被别人应用-->
    <sql id="baseColunm">
        country, state, city
    </sql>

    <select id="listAll" resultType="Address">
        select
        <include refid="baseColunm"/>
        from addresses
    </select>


</mapper>